pandas - used for data analysis and manipulation
basic data types: 
-> Series = takes a list as argument, 1D
  eg: s = pd.Series(["khushaal", "tony", "sheldon"])
-> DataFrame = takes a dictionary as arg, 2D
  eg: df = pd.DataFrame({"name" : "Khushaal","age":"20", "Sex":"Male"}), we can say that DataFrame is collection of Series

Some commonly used functions
pd.read_csv() -> reads the csv file memtioned in the brackets as the arg
csv_file.to_csv("{new file name}.csv") -> exports the data in csv_file object into a csv file with the name given in arg in the root directory
df.dtypes -> outputs the data types of the keys in the df DataFrame

DESCRIBE DATA
df.describe() -> gives statistical description of only the columns having numerical data
df.mean() -> gives teh mean for each column in the df, if any column is not of numeric type, it will raise "TypeError"
df.mean(numeric_only = True) -> mean of only those columns with numeric data type

df.sum() -> sums of all columns, objects and strings get concatenated and integers/floats are summed
len() -> returns size of data structure - Series or DataFrame

VIEWING AND SELECTING DATA
df.head() -> return first five rows along with headings (a quick snapshot)
df.head(num) -> return num no. of rows
df.tail() -> last 5 rows
df.loc[index] -> returns the attributes against the index in df, refers to index
df.iloc[num] -> returns the attriute at numth position (starting 0), refers to position
both loc and iloc can use slicing

selecting the column from df
df[{column name}] or df.{column name}
      |_> when column name has space
pandas.crosstab() -> this function kind of aggregates the columns mentioned in the argument dotted with the DataFrame, It finds the common and connects them
takes only two columns
df.groupby([{column name}]).{any function} -> groups the data acc to column mentioned and then performs the function on each group


DATA MANIPULATION USING PANDAS
df["{col name}"].plot() -> plots a line graph according to values in col name
df.["{col name}"].hist() -> plots a histograph

to use plot, mean and other statistical functions over the object dtype attributes, we need to convert them to float or int
df.["{col name}"].str.replace("{characters that are not nums}", "").astype(int/float)
Just to change the characters of the string:
Series_name.str.replace('{charcters in order as they are in elements}','', regex=True) ✔️

series.fillna({value to be filled}) -> this function will fill the missing value with mentioned value in arg

adding new columns to the DataFrame
1) using Series -> df["{col name}"] = Series_name (Suppose the series has 5 elements and df has 10, then it will assign first rows those nums and others as NaN
2) using python list -> syntax same, it will throw error if the list size and df size is not same
3) we canuse current data of df to create a new column as df["{col name}"] = operations(df[col1],....)
4) creating a column from a single value


For deleting the column we use :  df.drop("{col-name}", axis=1), axis attribute gives the location, it atkes values as 0, 1, 'index' and 'column'
0 or 'index'-> index
1 or 'column'-> col-name

shuffling(index wise) data in the dataframe -> done to make sure that our machine learning model doesn't form a pattern for data coming in an order
-> df.sample(frac = 1) -> this will produce an output of whole data being shuffled, frac = 1 means 100% data ie whole data if frac = 0.5 then only 50% of data is shuffled and that shuffled part is shown
to reset -> df.reset_index()




