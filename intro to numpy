numpy - numerical python -> backbone of data science, ML and other fields
Numpy is used over pure python as helps in doing complex calculations in shorter time as compared to pure python, bcoz of opt in C
uses vectorization via broadcasting ie avoiding writing loops

Main data type which is most oftenly used from the numpy library is - ndarray ( n dimensional array)
its attributes: 
1) shape -> shows the dimensions of the array
2) ndim -> shows the no. of dimensions
3) dtype -> shows the data type of elements in the aaray
4) size -> total no. of elements in the array

normal function (not a member):
type -> shows the type of array ie ndarray or numpy.ndarray

-> as pandas is built over numpy thus we can use ndarray to create a DataFrame coindition taht ndarray ndimhas to be 2

CREATING ARRAYS USING NUMPY
np.ones() -> takes the shape of the ndarray as the arg and returns an ndarray of the shape with each element as 1 in float
np.zeros() -> same as ones with element as 0 in float
np.arange() -> creates an array, takes start, stop(excluded) and step(gap between the elements), returns an array starting with start and followed by next step number, For floating point arguments, the length of the result is
    ``ceil((stop - start)/step)``.  Because of floating point overflow,
    this rule may result in the last element of `out` being greater
    than `stop`
using random module -> np.random.randint(start, end, shape =({shape of ndarray})) -> creates an ndarray of of given shape where each element belongs to range [start, end)
                    -> np.random.randome(({shape})) -> returns a ndarray of size as mentioned with random float values
                    -> np.random.rand({dimensions}) -> return a ndarray of random values, the returned ndarray is of dimensions as mentioned


The random numbers generated by random module aren't completely random(Pseudo random) -> they use a seed value against which these values are generated

if we use np.random.seed(seed={a random no}) -> this will keep all the random numbers generated aligned ie once an output is made using random, we will get same output on re running that piece of code
It basicaly tells Numpy to generated same set of numbers for a particular seed value
THIS IS USED WHEN WE SHARE OUR WORK WITH PEOPLE, WE NEED TO MAINTAIN SYNCRONOUSY AMONG ALL THE USERS TO AVOID PROBLEMS

